// <auto-generated />
using System;
using Csb.BigMom.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Csb.BigMom.Infrastructure.Migrations
{
    [DbContext(typeof(BigMomContext))]
    [Migration("20230612060304_jdc_migration")]
    partial class jdc_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan?>("HeureTlc")
                        .HasColumnType("interval")
                        .HasColumnName("heure_tlc");

                    b.Property<string>("Idsa")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("idsa");

                    b.Property<int>("contrat_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Idsa")
                        .IsUnique();

                    b.HasIndex("contrat_id");

                    b.ToTable("application");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Commerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateAffiliation")
                        .HasColumnType("date")
                        .HasColumnName("date_affiliation");

                    b.Property<DateTime?>("DateResiliation")
                        .HasColumnType("date")
                        .HasColumnName("date_resiliation");

                    b.Property<string>("Ef")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("ef");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("hash");

                    b.Property<string>("Identifiant")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("identifiant");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nom");

                    b.Property<int>("mcc_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Identifiant")
                        .IsUnique();

                    b.HasIndex("mcc_id");

                    b.ToTable("commerce");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Contrat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("date")
                        .HasColumnName("date_debut");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("date")
                        .HasColumnName("date_fin");

                    b.Property<string>("NoContrat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("no_contrat");

                    b.Property<int>("tpe_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("tpe_id");

                    b.HasIndex("NoContrat", "Code", "DateDebut")
                        .IsUnique();

                    b.ToTable("contrat");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.DataTrace", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("payload");

                    b.HasKey("Id");

                    b.ToTable("data_trace");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.DataTraceResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("payload");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.Property<string>("trace_id")
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("trace_id");

                    b.ToTable("data_trace_response");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.IntegrationTrace", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("payload");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("status");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("integration_trace");

                    b.HasDiscriminator<string>("type").HasValue("IntegrationTrace");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Mcc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("code");

                    b.Property<TimeSpan>("RangeEnd")
                        .HasColumnType("interval")
                        .HasColumnName("range_end");

                    b.Property<TimeSpan>("RangeStart")
                        .HasColumnType("interval")
                        .HasColumnName("range_start");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("mcc");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.SpreadTrace", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<TimeSpan?>("HeureTlc")
                        .HasColumnType("interval")
                        .HasColumnName("heure_tlc");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("payload");

                    b.Property<int>("application_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("application_id");

                    b.ToTable("spread_trace");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.SpreadTraceResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("job");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.Property<string>("trace_id")
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("trace_id");

                    b.ToTable("spread_trace_response");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Tlc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NbTransactionsCredit")
                        .HasColumnType("integer")
                        .HasColumnName("nb_trs_credit");

                    b.Property<int>("NbTransactionsDebit")
                        .HasColumnType("integer")
                        .HasColumnName("nb_trs_debit");

                    b.Property<DateTimeOffset>("ProcessingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processing_date");

                    b.Property<string>("Status")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("numeric")
                        .HasColumnName("total_credit");

                    b.Property<decimal>("TotalDebit")
                        .HasColumnType("numeric")
                        .HasColumnName("total_debit");

                    b.Property<decimal>("TotalReconcilie")
                        .HasColumnType("numeric")
                        .HasColumnName("total_reconcilie");

                    b.Property<int>("app_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("app_id");

                    b.ToTable("tlc");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Tpe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Modele")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modele");

                    b.Property<string>("NoSerie")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("no_serie");

                    b.Property<string>("NoSite")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("no_site");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("statut");

                    b.Property<string>("TypeConnexion")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("type_connexion");

                    b.Property<int>("commerce_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NoSerie")
                        .IsUnique();

                    b.HasIndex("commerce_id");

                    b.ToTable("tpe");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.CommerceIntegrationTrace", b =>
                {
                    b.HasBaseType("Csb.BigMom.Infrastructure.Entities.IntegrationTrace");

                    b.Property<string>("Guid")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("guid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("index");

                    b.Property<long>("Total")
                        .HasColumnType("bigint")
                        .HasColumnName("total");

                    b.HasDiscriminator().HasValue("CommerceIntegrationTrace");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.TlcIntegrationTrace", b =>
                {
                    b.HasBaseType("Csb.BigMom.Infrastructure.Entities.IntegrationTrace");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<string>("Table")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("table");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasDiscriminator().HasValue("TlcIntegrationTrace");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Application", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.Contrat", "Contrat")
                        .WithMany("Applications")
                        .HasForeignKey("contrat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrat");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Commerce", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.Mcc", "Mcc")
                        .WithMany()
                        .HasForeignKey("mcc_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mcc");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Contrat", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.Tpe", "Tpe")
                        .WithMany("Contrats")
                        .HasForeignKey("tpe_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tpe");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.DataTraceResponse", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.DataTrace", "Trace")
                        .WithMany("Responses")
                        .HasForeignKey("trace_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trace");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.SpreadTrace", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("application_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.SpreadTraceResponse", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.SpreadTrace", "Trace")
                        .WithMany("Responses")
                        .HasForeignKey("trace_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trace");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Tlc", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.Application", "App")
                        .WithMany("Tlcs")
                        .HasForeignKey("app_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Tpe", b =>
                {
                    b.HasOne("Csb.BigMom.Infrastructure.Entities.Commerce", "Commerce")
                        .WithMany("Tpes")
                        .HasForeignKey("commerce_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commerce");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Application", b =>
                {
                    b.Navigation("Tlcs");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Commerce", b =>
                {
                    b.Navigation("Tpes");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Contrat", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.DataTrace", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.SpreadTrace", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Csb.BigMom.Infrastructure.Entities.Tpe", b =>
                {
                    b.Navigation("Contrats");
                });
#pragma warning restore 612, 618
        }
    }
}
